{
    "data" : [
        " ",
        " ",
        " ",
        "0",
        " ",
        " ",
        "0",
        ":",
        "0",
        "0",
        ":",
        "0",
        "2",
        " ",
        " ",
        "0",
        ":",
        "0",
        "0",
        ":",
        "0",
        "2",
        " ",
        "-",
        "-",
        ":",
        "-",
        "-",
        ":",
        "-",
        "-",
        " ",
        "2",
        "1",
        "4",
        "8",
        "k",
        "\n",
        " ",
        " % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0",
        "\r",
        " ",
        " ",
        "0",
        " ",
        " ",
        " ",
        " ",
        " ",
        "0",
        " ",
        " ",
        " ",
        " ",
        "0",
        " ",
        " ",
        " ",
        " ",
        " ",
        "0",
        " ",
        " ",
        " ",
        " ",
        "0",
        " ",
        " ",
        " ",
        " ",
        " ",
        "0",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        "0",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        "0",
        " ",
        "-",
        "-",
        ":",
        "-",
        "-",
        ":",
        "-",
        "-",
        " ",
        "-",
        "-",
        ":",
        "-",
        "-",
        ":",
        "-",
        "-",
        " ",
        "-",
        "-",
        ":",
        "-",
        "-",
        ":",
        "-",
        "-",
        " ",
        " ",
        " ",
        " ",
        " ",
        "0",
        "\r",
        " ",
        "4",
        "1",
        " ",
        "5",
        "4",
        "6",
        "7",
        "k",
        " ",
        " ",
        " ",
        "4",
        "1",
        " ",
        "2",
        "2",
        "8",
        "7",
        "k",
        " ",
        " ",
        " ",
        " ",
        "0",
        " ",
        " ",
        " ",
        " ",
        " ",
        "0",
        " ",
        " ",
        "1",
        "6",
        "9",
        "1",
        "k",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        "0",
        " ",
        " ",
        "0",
        ":",
        "0",
        "0",
        ":",
        "0",
        "3",
        " ",
        " ",
        "0",
        ":",
        "0",
        "0",
        ":",
        "0",
        "1",
        " ",
        " ",
        "0",
        ":",
        "0",
        "0",
        ":",
        "0",
        "2",
        " ",
        "1",
        "6",
        "9",
        "0",
        "k",
        "\r",
        "1",
        "0",
        "0",
        " ",
        "5",
        "4",
        "6",
        "7",
        "k",
        " ",
        " ",
        "1",
        "0",
        "0",
        " ",
        "5",
        "4",
        "6",
        "7",
        "k",
        " ",
        " ",
        " ",
        " ",
        "0",
        " ",
        " ",
        " ",
        " ",
        " ",
        "0",
        " ",
        " ",
        "2",
        "7",
        "3",
        "6",
        "k",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        "0",
        " ",
        " ",
        "0",
        ":",
        "0",
        "0",
        ":",
        "0",
        "1",
        " ",
        " ",
        "0",
        ":",
        "0",
        "0",
        ":",
        "0",
        "1",
        " ",
        "-",
        "-",
        ":",
        "-",
        "-",
        ":",
        "-",
        "-",
        " ",
        "2",
        "7",
        "3",
        "5",
        "k",
        "\n",
        "* installing *source* package ‘nycflights13’ ...\n",
        "** package ‘nycflights13’ successfully unpacked and MD5 sums checked\n",
        "** R\n",
        "** data\n",
        "*** moving datasets to lazyload DB\n",
        "** preparing package for lazy loading\n",
        "** help\n",
        "*** installing help indices\n",
        "** building package indices\n",
        "** testing if installed package can be loaded\n",
        "* DONE (nycflights13)\n",
        "* installing *source* package ‘Lahman’ ...\n",
        "** package ‘Lahman’ successfully unpacked and MD5 sums checked\n",
        "** R\n",
        "** data\n",
        "*** moving datasets to lazyload DB\n",
        "** demo\n",
        "** inst\n",
        "** preparing package for lazy loading\n",
        "** help\n",
        "*** installing help indices\n",
        "** building package indices\n",
        "** testing if installed package can be loaded\n",
        "* DONE (Lahman)\n",
        "\n",
        "",
        "The downloaded source packages are in\n\t‘/tmp/RtmpN0QC16/downloaded_packages’",
        "",
        "\n",
        "> ",
        "library(sparklyr)",
        "> ",
        "library(dplyr)",
        "> ",
        "install.packages('RXKCD')",
        "Installing package into ‘/home/azeltov/R/x86_64-pc-linux-gnu-library/3.3’\n(as ‘lib’ is unspecified)\n",
        " ",
        " ",
        "%",
        " ",
        "T",
        "o",
        "t",
        "a",
        "l",
        " ",
        " ",
        " ",
        " ",
        "%",
        " ",
        "R",
        "e",
        "c",
        "e",
        "i",
        "v",
        "e",
        "d",
        " ",
        "%",
        " ",
        "X",
        "f",
        "e",
        "r",
        "d",
        " ",
        " ",
        "A",
        "v",
        "e",
        "r",
        "a",
        "g",
        "e",
        " ",
        "S",
        "p",
        "e",
        "e",
        "d",
        " ",
        " ",
        " ",
        "T",
        "i",
        "m",
        "e",
        " ",
        " ",
        " ",
        " ",
        "T",
        "i",
        "m",
        "e",
        " ",
        " ",
        " ",
        " ",
        " ",
        "T",
        "i",
        "m",
        "e",
        " ",
        " ",
        "C",
        "u",
        "r",
        "r",
        "e",
        "n",
        "t",
        "\n",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        "D",
        "l",
        "o",
        "a",
        "d",
        " ",
        " ",
        "U",
        "p",
        "l",
        "o",
        "a",
        "d",
        " ",
        " ",
        " ",
        "T",
        "o",
        "t",
        "a",
        "l",
        " ",
        " ",
        " ",
        "S",
        "p",
        "e",
        "n",
        "t",
        " ",
        " ",
        " ",
        " ",
        "L",
        "e",
        "f",
        "t",
        " ",
        " ",
        "S",
        "p",
        "e",
        "e",
        "d",
        "\n",
        "\r",
        " ",
        " ",
        "0",
        " ",
        " ",
        " ",
        " ",
        " ",
        "0",
        " ",
        " ",
        " ",
        " ",
        "0",
        " ",
        " ",
        "   0    0     0      0      0 --:--:-- --:--:-- --:--:--     0",
        "\r",
        " ",
        " ",
        "9",
        " ",
        " ",
        "3",
        "1",
        "9",
        "k",
        " ",
        " ",
        " ",
        " ",
        "9",
        " ",
        "3",
        "2",
        "5",
        "0",
        "1",
        " ",
        " ",
        " ",
        " ",
        "0",
        " ",
        " ",
        " ",
        " ",
        " ",
        "0",
        " ",
        " ",
        "3",
        "4",
        "0",
        "0",
        "9",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        "0",
        " ",
        " ",
        "0",
        ":",
        "0",
        "0",
        ":",
        "0",
        "9",
        " ",
        "-",
        "-",
        ":",
        "-",
        "-",
        ":",
        "-",
        "-",
        " ",
        " ",
        "0",
        ":",
        "0",
        "0",
        ":",
        "0",
        "9",
        " ",
        "3",
        "3",
        "9",
        "9",
        "6",
        "\r",
        "1",
        "0",
        "0",
        " ",
        " ",
        "3",
        "1",
        "9",
        "k",
        " ",
        " ",
        "1",
        "0",
        "0",
        " ",
        " ",
        "3",
        "1",
        "9",
        "k",
        " ",
        " ",
        " ",
        " ",
        "0",
        " ",
        " ",
        " ",
        " ",
        " ",
        "0",
        " ",
        " ",
        " ",
        "2",
        "8",
        "2",
        "k",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        "0",
        " ",
        " ",
        "0",
        ":",
        "0",
        "0",
        ":",
        "0",
        "1",
        " ",
        " ",
        "0",
        ":",
        "0",
        "0",
        ":",
        "0",
        "1",
        " ",
        "-",
        "-",
        ":",
        "-",
        "-",
        ":",
        "-",
        "-",
        " ",
        " ",
        "2",
        "8",
        "2",
        "k",
        "\n",
        "* installing *source* package ‘RXKCD’ ...\n** package ‘RXKCD’ successfully unpacked and MD5 sums checked\n",
        "** R\n",
        "** inst\n",
        "** preparing package for lazy loading\n",
        "** help\n",
        "*** installing help indices\n",
        "** building package indices\n",
        "** testing if installed package can be loaded\n",
        "* DONE (RXKCD)\n",
        "\n",
        "",
        "The downloaded source packages are in\n\t‘/tmp/RtmpN0QC16/downloaded_packages’",
        "",
        "\n",
        "> ",
        "library(RXKCD)",
        "> ",
        "getXKCD(552)",
        "Error in file(con, \"r\") : cannot open connection\n",
        "> ",
        "getXKCD('552')",
        "Error in file(con, \"r\") : cannot open connection\n",
        "> ",
        "spark_disconnect(sc)",
        "> ",
        "library(sparklyr)",
        "> ",
        "library(dplyr)",
        "> ",
        "sc <- spark_connect(master = \"local\")",
        "> ",
        "spark_disconnect(sc)",
        "> ",
        "sc <- spark_connect(master = \"local\")",
        "> ",
        "install.packages('nycflights13')",
        "Installing package into ‘/home/azeltov/R/x86_64-pc-linux-gnu-library/3.3’\n(as ‘lib’ is unspecified)\n",
        "  % Total    % Received % Xferd  Aver",
        "age Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0",
        "\r",
        " ",
        "1",
        "4",
        " ",
        "4",
        "5",
        "4",
        "2",
        "k",
        " ",
        " ",
        " ",
        "1",
        "4",
        " ",
        " ",
        "6",
        "5",
        "5",
        "k",
        " ",
        " ",
        " ",
        " ",
        "0",
        " ",
        " ",
        " ",
        " ",
        " ",
        "0",
        " ",
        " ",
        " ",
        "7",
        "2",
        "8",
        "k",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        "0",
        " ",
        " ",
        "0",
        ":",
        "0",
        "0",
        ":",
        "0",
        "6",
        " ",
        "-",
        "-",
        ":",
        "-",
        "-",
        ":",
        "-",
        "-",
        " ",
        " ",
        "0",
        ":",
        "0",
        "0",
        ":",
        "0",
        "6",
        " ",
        " ",
        "7",
        "2",
        "8",
        "k",
        "\r",
        "1",
        "0",
        "0",
        " ",
        "4",
        "5",
        "4",
        "2",
        "k",
        " ",
        " ",
        "1",
        "0",
        "0",
        " ",
        "4",
        "5",
        "4",
        "2",
        "k",
        " ",
        " ",
        " ",
        " ",
        "0",
        " ",
        " ",
        " ",
        " ",
        " ",
        "0",
        " ",
        " ",
        "2",
        "5",
        "5",
        "9",
        "k",
        " ",
        " ",
        " ",
        " ",
        " ",
        " ",
        "0",
        " ",
        " ",
        "0",
        ":",
        "0",
        "0",
        ":",
        "0",
        "1",
        " ",
        " ",
        "0",
        ":",
        "0",
        "0",
        ":",
        "0",
        "1",
        " ",
        "-",
        "-",
        ":",
        "-",
        "-",
        ":",
        "-",
        "-",
        " ",
        "2",
        "5",
        "6",
        "0",
        "k",
        "\n",
        "* installing *source* package ‘nycflights13’ ...\n",
        "** package ‘nycflights13’ successfully unpacked and MD5 sums checked\n",
        "** R\n",
        "** data\n",
        "*** moving datasets to lazyload DB\n",
        "** preparing package for lazy loading\n",
        "** help\n",
        "*** installing help indices\n",
        "** building package indices\n",
        "** testing if installed package can be loaded\n",
        "* DONE (nycflights13)\n",
        "\n",
        "",
        "The downloaded source packages are in\n\t‘/tmp/RtmpN0QC16/downloaded_packages’",
        "",
        "\n",
        "> ",
        "flightsTbl <- copy_to(dest=sc, df=nycflights13::flights, name='flights', memory=TRUE)",
        "> ",
        "class(flightsTbl)",
        "[1] \"tbl_spark\" \"tbl_sql\"   \"tbl_lazy\"  \"tbl\"      \n",
        "> ",
        "flightsTbl",
        "# Source:   table<flights> [?? x 19]\n# Database: spark_connection\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight tailnum origin  dest\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl>   <chr>  <int>   <chr>  <chr> <chr>\n 1  2013     1     1      517            515         2      830            819        11      UA   1545  N14228    EWR   IAH\n 2  2013     1     1      533            529         4      850            830        20      UA   1714  N24211    LGA   IAH\n",
        " 3  2013     1     1      542            540         2      923            850        33      AA   1141  N619AA    JFK   MIA\n 4  2013     1     1      544            545        -1     1004           1022       -18      B6    725  N804JB    JFK   BQN\n 5  2013     1     1      554            600        -6      812            837       -25      DL    461  N668DN    LGA   ATL\n 6  2013     1     1      554            558        -4      740            728        12      UA   1696  N39463    EWR   ORD\n 7  2013     1     1      555            600        -5      913            854        19      B6    507  N516JB    EWR   FLL\n",
        " 8  2013     1     1      557            600        -3      709            723       -14      EV   5708  N829AS    LGA   IAD\n 9  2013     1     1      557            600        -3      838            846        -8      B6     79  N593JB    JFK   MCO\n10  2013     1     1      558            600        -2      753            745         8      AA    301  N3ALAA    LGA   ORD\n# ... with 3.368e+05 more rows, and 5 more variables: air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dbl>\n",
        "> ",
        "ncol(flightsTbl)",
        "[1] 19\n",
        "> ",
        "nrow(flightsTbl)",
        "[1] 336776\n",
        "> ",
        "flightsTbl %>% ",
        "+ ",
        "  group_by(origin) %>% ",
        "+ ",
        "  summarize(AvgDelay=mean(arr_delay))",
        "# Source:   lazy query [?? x 2]\n# Database: spark_connection\n  origin AvgDelay\n   <chr>    <dbl>\n1    EWR 9.107055\n2    LGA 5.783488\n3    JFK 5.551481\n",
        "Warning messages:\n",
        "1: Translator is missing window functions:\ncor, count, cov, n_distinct, sd \n",
        "2: Translator is missing window functions:\ncor, count, cov, n_distinct, sd \n",
        "> ",
        "head(flightsTbl)",
        "# Source:   lazy query [?? x 19]\n# Database: spark_connection\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight tailnum origin  dest\n  <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl>   <chr>  <int>   <chr>  <chr> <chr>\n1  2013     1     1      517            515         2      830            819        11      UA   1545  N14228    EWR   IAH\n2  2013     1     1      533            529         4      850            830        20      UA   1714  N24211    LGA   IAH\n",
        "3  2013     1     1      542            540         2      923            850        33      AA   1141  N619AA    JFK   MIA\n4  2013     1     1      544            545        -1     1004           1022       -18      B6    725  N804JB    JFK   BQN\n5  2013     1     1      554            600        -6      812            837       -25      DL    461  N668DN    LGA   ATL\n6  2013     1     1      554            558        -4      740            728        12      UA   1696  N39463    EWR   ORD\n# ... with 5 more variables: air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dbl>\n",
        "Warning message:\n",
        "In spark_web.spark_shell_connection(sc) :",
        "\n ",
        " Spark UI URL not found in logs, attempting to guess.\n",
        "> ",
        "flightsTbl %>% ",
        "+ ",
        "  group_by(origin) %>% ",
        "+ ",
        "  summarize(AvgDelay=mean(dep_delay))",
        "# Source:   lazy query [?? x 2]\n# Database: spark_connection\n  origin AvgDelay\n   <chr>    <dbl>\n1    EWR 15.10795\n2    LGA 10.34688\n3    JFK 12.11216\n",
        "Warning messages:\n",
        "1: Translator is missing window functions:\ncor, count, cov, n_distinct, sd \n",
        "2: Translator is missing window functions:\ncor, count, cov, n_distinct, sd \n",
        "> ",
        "?nycflights13::flights",
        "> ",
        "head(flightsTbl)",
        "# Source:   lazy query [?? x 19]\n# Database: spark_connection\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight tailnum origin  dest\n  <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl>   <chr>  <int>   <chr>  <chr> <chr>\n1  2013     1     1      517            515         2      830            819        11      UA   1545  N14228    EWR   IAH\n2  2013     1     1      533            529         4      850            830        20      UA   1714  N24211    LGA   IAH\n",
        "3  2013     1     1      542            540         2      923            850        33      AA   1141  N619AA    JFK   MIA\n4  2013     1     1      544            545        -1     1004           1022       -18      B6    725  N804JB    JFK   BQN\n5  2013     1     1      554            600        -6      812            837       -25      DL    461  N668DN    LGA   ATL\n6  2013     1     1      554            558        -4      740            728        12      UA   1696  N39463    EWR   ORD\n# ... with 5 more variables: air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dbl>\n",
        "> ",
        "mod1 <- ml_linear_regression(x=flightsTbl, ",
        "+ ",
        "                             response='dep_delay',",
        "+ ",
        "                             features=c('month', 'day', 'dep_time')",
        "+ ",
        ")",
        "* Dropped 8255 rows with 'na.omit' (336776 => 328521)\n",
        "> ",
        "mod1",
        "Call: ml_linear_regression(x = flightsTbl, response = \"dep_delay\", features = c(\"month\", \"day\", \"dep_time\"))\n\nCoefficients:\n  (Intercept)         month           day      dep_time \n-14.837119759  -0.224321841   0.002886542   0.021423930 \n\n",
        "> ",
        "summary(mod1)",
        "Call: ml_linear_regression(x = flightsTbl, response = \"dep_delay\", features = c(\"month\", \"day\", \"dep_time\"))\n\nDeviance Residuals: (approximate):\n     Min       1Q   Median       3Q      Max \n -53.067  -18.647   -8.056    1.168 1006.396 \n\nCoefficients:\n               Estimate  Std. Error t value Pr(>|t|)    \n(Intercept) -14.8371198   0.2671909 -55.530   <2e-16 ***\nmonth        -0.2243218   0.0198469 -11.303   <2e-16 ***\nday           0.0028865   0.0077173   0.374   0.7084    \ndep_time      0.0214239   0.0001387",
        " 154.462   <2e-16 ***\n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n\nR-Squared: 0.06808\nRoot Mean Squared Error: 38.82\n",
        "> ",
        "class(mod1)",
        "[1] \"ml_model_linear_regression\" \"ml_model\"                  \n",
        "> ",
        "library(coefplot)",
        "> ",
        "coefplot(mod1, sort='mag')",
        "Call: ml_linear_regression(x = flightsTbl, response = \"dep_delay\", features = c(\"month\", \"day\", \"dep_time\"))\n\nDeviance Residuals: (approximate):\n     Min       1Q   Median       3Q      Max \n -69.196  -18.671   -8.087    1.195 1003.241 \n\nCoefficients:\n               Estimate  Std. Error t value Pr(>|t|)    \n(Intercept) -14.8371198   0.2671909 -55.530   <2e-16 ***\nmonth        -0.2243218   0.0198469 -11.303   <2e-16 ***\nday           0.0028865   0.0077173   0.374   0.7084    \ndep_time      0.0214239   0.0001387",
        " 154.462   <2e-16 ***\n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n\nR-Squared: 0.06808\nRoot Mean Squared Error: 38.82\n",
        "Error in extract.coef.default(model, ...) : \n  'names' attribute [2] must be the same length as the vector [0]\n",
        "> ",
        "coefplot(mod1)",
        "Call: ml_linear_regression(x = flightsTbl, response = \"dep_delay\", features = c(\"month\", \"day\", \"dep_time\"))\n\nDeviance Residuals: (approximate):\n     Min       1Q   Median       3Q      Max \n -61.042  -18.736   -8.140    1.099 1006.396 \n\nCoefficients:\n               Estimate  Std. Error t value Pr(>|t|)    \n(Intercept) -14.8371198   0.2671909 -55.530   <2e-16 ***\nmonth        -0.2243218   0.0198469 -11.303   <2e-16 ***\nday           0.0028865   0.0077173   0.374   0.7084    \ndep_time      0.0214239   0.0001387",
        " 154.462   <2e-16 ***\n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n\nR-Squared: 0.06808\nRoot Mean Squared Error: 38.82\n",
        "Error in extract.coef.default(model, ...) : \n  'names' attribute [2] must be the same length as the vector [0]\n",
        "> ",
        "mod2 <- ml_linear_regression(x=flightsTbl, ",
        "+ ",
        "                             response='dep_delay',",
        "+ ",
        "                             features=c('month', 'day', 'dep_time', 'origin')",
        "+ ",
        ")",
        "* Dropped 9430 rows with 'na.omit' (336776 => 327346)\n",
        "> ",
        "mod2",
        "Call: ml_linear_regression(x = flightsTbl, response = \"dep_delay\", features = c(\"month\", \"day\", \"dep_time\", \"origin\"))\n\nCoefficients:\n  (Intercept)         month           day      dep_time    origin_JFK    origin_LGA \n-12.212131767  -0.217436029   0.003821908   0.021385602  -4.310952117  -4.122168594 \n\n",
        "> ",
        "summary(mod2)",
        "Call: ml_linear_regression(x = flightsTbl, response = \"dep_delay\", features = c(\"month\", \"day\", \"dep_time\", \"origin\"))\n\nDeviance Residuals: (approximate):\n     Min       1Q   Median       3Q      Max \n -67.521  -18.527   -8.112    1.327 1008.045 \n\nCoefficients:\n               Estimate  Std. Error  t value Pr(>|t|)    \n(Intercept) -1.2212e+01  2.7982e-01 -43.6433   <2e-16 ***\nmonth       -2.1744e-01  1.9787e-02 -10.9891   <2e-16 ***\nday          3.8219e-03  7.6928e-03   0.4968   0.6193    \ndep_time     2.1386e-02",
        "  1.3866e-04 154.2274   <2e-16 ***\norigin_JFK  -4.3110e+00  1.6278e-01 -26.4831   <2e-16 ***\norigin_LGA  -4.1222e+00  1.6590e-01 -24.8474   <2e-16 ***\n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n\nR-Squared: 0.07031\nRoot Mean Squared Error: 38.63\n",
        "> ",
        "mod2 <- ml_linear_regression(x=flightsTbl, ",
        "+ ",
        "                             response='dep_delay',",
        "+ ",
        "                             features=c('month', 'day', 'dep_time', 'origin', alpha=1)",
        "+ ",
        ")",
        "Error in if (entry$type != \"StringType\") return(feature) : \n  argument is of length zero\n",
        "> ",
        "mod2 <- ml_linear_regression(x=flightsTbl, ",
        "+ ",
        "                             response='dep_delay',",
        "+ ",
        "                             features=c('month', 'day', 'dep_time', 'origin'),",
        "+ ",
        "                             alpha=1",
        "+ ",
        ")",
        "* Dropped 9430 rows with 'na.omit' (336776 => 327346)\n",
        "> ",
        "mod2",
        "Call: ml_linear_regression(x = flightsTbl, response = \"dep_delay\", features = c(\"month\", \"day\", \"dep_time\", \"origin\"), alpha = 1)\n\nCoefficients:\n  (Intercept)         month           day      dep_time    origin_JFK    origin_LGA \n-12.212160206  -0.217435276   0.003823371   0.021385600  -4.310942414  -4.122172247 \n\n",
        "> ",
        "summary(mod2)",
        "Call: ml_linear_regression(x = flightsTbl, response = \"dep_delay\", features = c(\"month\", \"day\", \"dep_time\", \"origin\"), alpha = 1)\n\nDeviance Residuals: (approximate):\n     Min       1Q   Median       3Q      Max \n -51.541  -18.569   -8.153    1.339 1114.418 \n\nCoefficients:\n  (Intercept)         month           day      dep_time    origin_JFK    origin_LGA \n-12.212160206  -0.217435276   0.003823371   0.021385600  -4.310942414  -4.122172247 \n\nR-Squared: 0.07031\nRoot Mean Squared Error: 38.63\n",
        "> ",
        "mod4 <- rxLinMod(dep_delay ~ month + day + dep_time, data=flightsTbl)",
        "Error in rxUtilsFileDataStrings(data = data, missingData = missingData) : \n  data must be a data frame, data source, or a character string\n",
        "> ",
        "R.version",
        "               _                           \nplatform       x86_64-pc-linux-gnu         \narch           x86_64                      \nos             linux-gnu                   \nsystem         x86_64, linux-gnu           \nstatus                                     \nmajor          3                           \nminor          3.3                         \nyear           2017                        \nmonth          03                          \nday            06                          \nsvn rev        72310                       ",
        "\nlanguage       R                           \nversion.string R version 3.3.3 (2017-03-06)\nnickname       Another Canoe               \n",
        "> ",
        "dplyr::db_drop_table(sc, 'flights')",
        "Error in (function (classes, fdef, mtable)  : \n  unable to find an inherited method for function ‘dbExecute’ for signature ‘\"spark_connection\", \"sql\"’\n",
        "> ",
        "spark_disconnect(sc)",
        "> ",
        "?rxExecBy"
    ],
    "type" : [
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        3,
        0,
        1,
        2,
        2,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1
    ]
}