download.file('https://www.jaredlander.com/data/acs_ny.csv',
destfile='acs_ny.csv')
acs <- read.table('acs_ny.csv', header=TRUE, sep=',', stringsAsFactors=FALSE)
income1 <- lm(FamilyIncome ~ FamilyType + NumBedrooms + NumPeople, data=acs)
library(coefplot)
install.packages('devtools')
library(coefplot)
coefplot(income1, sort='mag')
devtools::install_github('jaredlander/coefplot')
library(coefplot)
coefplot(income1, sort='mag')
library(RevoScaleR)
income2 <- rxLinMod(FamilyIncome ~ FamilyType + NumBedrooms + NumPeople,
data=acs)
income2 <- rxLinMod(FamilyIncome ~ F(FamilyType) + NumBedrooms + NumPeople,
data=acs)
library(dplyr)
acs <- acs %>%
mutate(FamilyType=factor(FamilyType))
income2 <- rxLinMod(FamilyIncome ~ FamilyType + NumBedrooms + NumPeople,
data=acs)
income2
summary(income2)
summary(income1)
summary(income2)
income2 <- rxLinMod(FamilyIncome ~ FamilyType + NumBedrooms + NumPeople,
data=acs,
dropFirst=TRUE)
summary(income2)
income2 <- rxLinMod(FamilyIncome ~ FamilyType + NumBedrooms + NumPeople,
data=acs,
dropFirst=TRUE, coefLabelStyle="R")
summary(income2)
income2 <- rxLinMod(FamilyIncome ~ FamilyType + NumBedrooms + NumPeople,
data=acs,
dropFirst=TRUE, coefLabelStyle="Revo")
summary(income2)
coefplot(income2)
coefplot(income2, sort='mag')
download.file('https://www.jaredlander.com/data/Manhattan_Train.csv',
destfile='Manhattan_Train.csv')
download.file('https://www.jaredlander.com/data/manhattan_Train.csv',
destfile='manhattan_Train.csv')
unlink('Manhattan_Train.csv')
lots <- RxDataSource('lots.xdf')
lots <- RxXdfData('lots.xdf')
rxTextToXdf(inFile='manhattan_Train.csv',
outFile=lots,
overwrite=TRUE, stringsAsFactors=TRUE,
rowsPerRead=10000)
rxTextToXdf(inFile='manhattan_Train.csv',
outFile=lots,
overwrite=TRUE, stringsAsFactors=TRUE,
rowsPerRead=9000)
rxTextToXdf(inFile='manhattan_Train.csv',
outFile=lots,
overwrite=TRUE, stringsAsFactors=TRUE,
rowsPerRead=8000)
rxTextToXdf(inFile='manhattan_Train.csv',
outFile=lots,
overwrite=TRUE, stringsAsFactors=TRUE,
rowsPerRead=7000)
rxTextToXdf(inFile='manhattan_Train.csv',
outFile=lots,
overwrite=TRUE, stringsAsFactors=TRUE,
rowsPerRead=6000)
rxTextToXdf(inFile='manhattan_Train.csv',
outFile=lots,
overwrite=TRUE, stringsAsFactors=TRUE,
rowsPerRead=7000)
lots
head(lots)
rxGetInfo(lots)
rxSummary(lots)
rxSummary(~., lots)
rxSummary(~ FamilyType + FamilyIncome + NumBedrooms, data=lots)
names(lots)
rxSummary(~ TotalValue + FireService + LotArea, data=lots)
str(lots)
rxGetInfo(lots)
rxGetVarInfo(lots)
rxHistogram(~ TotalValue, data=lots)
library(dplyrXdf)
devtools::install_github('RevolutionAnalytics/dplyrXdf', build_vignettes=FALSE)
install.packages('dplyrXdf')
devtools::install_github('RevolutionAnalytics/dplyrXdf', build_vignettes=FALSE)
library(dplyrXdf)
lots %>%
count(FireService)
lots %>%
count(FireService) %>%
collect()
lots %>%
group_by(FireService) %>%
summarize(AvgPrice=mean(TotalValue, na.rm=TRUE)) %>%
collect()
names(lots)
value1 <- rxLinMod(TotalValue ~ LotArea + FireService + HistoricDistrict,
data=lots)
coefplot(value1, plot=FALSE)
class(value1)
summary(value1)
coefplot(value1, sort='mag')
tail(head(acs, n=4), n=1)
acs %>% head(n=4) %>% tail(n=1)
lots %>%
mutate(AreaCentered=LotArea - mean(LotArea, na.rm=TRUE)) %>%
rxLinMod(TotalValue ~ FireService + HistoricDistrict + AreaCentered, data=.)
value2 <- lots %>%
mutate(AreaCentered=LotArea - mean(LotArea, na.rm=TRUE)) %>%
rxLinMod(TotalValue ~ FireService + HistoricDistrict + AreaCentered, data=.)
coefplot(value2, sort='mag')
rxPredict(modelObject=value1, data=lots, outData=lots, overwrite=TRUE,
type='response', computeResiduals=TRUE,
predVarNames='Fitted', residVarNames='Resids')
head(lots)
lots %>%
mutate(AreaCentered=LotArea - mean(LotArea, na.rm=TRUE)) %>%
rxPredict(modelObject=value2, data=., outData=lots, overwrite=TRUE,
type='response', computeResiduals=TRUE,
predVarNames='Fitted2', residVarNames='Resids2')
head(lots)
rxTextToXdf(inFile='manhattan_Train.csv',
outFile=lots,
overwrite=TRUE, stringsAsFactors=TRUE,
rowsPerRead=7000)
lots <-lots %>%
mutate(AreaCentered=LotArea - mean(LotArea, na.rm=TRUE)) %>%
persist(lots)
head(lots)
packageVersion('dplyrXdf')
value2 <- lots %>%
# mutate(AreaCentered=LotArea - mean(LotArea, na.rm=TRUE)) %>%
rxLinMod(TotalValue ~ FireService + HistoricDistrict + AreaCentered, data=.)
rxPredict(modelObject=value2, data=lots, outData=lots, overwrite=TRUE,
type='response', computeResiduals=TRUE,
predVarNames='Fitted2', residVarNames='Resids2')
head(lots)
library(sparklyr)
library(dplyr)
sc <- spark_connect(master = "local")
library(sparklyr)
library(dplyr)
sc <- spark_connect(master = "local", version = "2.0.2")
install.packages(c("nycflights13", "Lahman"))
library(sparklyr)
library(dplyr)
install.packages('RXKCD')
library(RXKCD)
getXKCD(552)
getXKCD('552')
spark_disconnect(sc)
library(sparklyr)
library(dplyr)
sc <- spark_connect(master = "local")
spark_disconnect(sc)
sc <- spark_connect(master = "local")
install.packages('nycflights13')
flightsTbl <- copy_to(dest=sc, df=nycflights13::flights, name='flights', memory=TRUE)
class(flightsTbl)
flightsTbl
ncol(flightsTbl)
nrow(flightsTbl)
flightsTbl %>%
group_by(origin) %>%
summarize(AvgDelay=mean(arr_delay))
head(flightsTbl)
flightsTbl %>%
group_by(origin) %>%
summarize(AvgDelay=mean(dep_delay))
?nycflights13::flights
head(flightsTbl)
mod1 <- ml_linear_regression(x=flightsTbl,
response='dep_delay',
features=c('month', 'day', 'dep_time')
)
mod1
summary(mod1)
class(mod1)
library(coefplot)
coefplot(mod1, sort='mag')
coefplot(mod1)
mod2 <- ml_linear_regression(x=flightsTbl,
response='dep_delay',
features=c('month', 'day', 'dep_time', 'origin')
)
mod2
summary(mod2)
mod2 <- ml_linear_regression(x=flightsTbl,
response='dep_delay',
features=c('month', 'day', 'dep_time', 'origin', alpha=1)
)
mod2 <- ml_linear_regression(x=flightsTbl,
response='dep_delay',
features=c('month', 'day', 'dep_time', 'origin'),
alpha=1
)
mod2
summary(mod2)
mod4 <- rxLinMod(dep_delay ~ month + day + dep_time, data=flightsTbl)
R.version
dplyr::db_drop_table(sc, 'flights')
spark_disconnect(sc)
?rxExecBy
getwd()
library(RevoScaleR)
library(sparklyr)
library(dplyr)
o define parameters specific to your setup
cc <- rxSparkConnect(reset = TRUE, interop = "sparklyr")
# The returned Spark connection (sc) provides a remote dplyr data source
# to the Spark cluster using SparlyR within rxSparkConnect.
sc <- rxGetSparklyrConnection(cc)
# Next, load mtcars in to Spark using a dplyr pipeline
mtcars_tbl <- copy_to(sc, mtcars)
Sys.setenv("SPARK_HOME"="/dsvm/tools/spark/spark-2.1.1")
cc <- rxSparkConnect(reset = TRUE, interop = "sparklyr")
sc <- spark_connect(master = "local")
flightsTbl <- copy_to(dest=sc, df=nycflights13::flights, name='flights', memory=TRUE)
cc <- rxSparkConnect(reset = FALSE, interop = "sparklyr")
sc <- rxGetSparklyrConnection(cc)
